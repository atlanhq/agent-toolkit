name: Test-Release-Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - feature/test-release
    paths:
      - 'modelcontextprotocol/version.py'

jobs:
  test-release-workflow:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -m 1 "__version__" modelcontextprotocol/version.py | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version detected: $VERSION"

      - name: Generate changelog entry
        run: |
          set +e  # Don't exit on error
          VERSION="${{ steps.get_version.outputs.version }}"
          RELEASE_DATE=$(date +"%Y-%m-%d")
          echo "Generating changelog for version $VERSION ($RELEASE_DATE)"

          # Get the previous version tag or first commit
          PREV_TAG=$(git tag -l "v*" --sort=-v:refname | head -n 1 || echo "")
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag, use root commit
            PREV_COMMIT=$(git rev-list --max-parents=0 HEAD)
            RANGE="$PREV_COMMIT..HEAD"
          else
            RANGE="$PREV_TAG..HEAD"
          fi

          echo "Using commit range: $RANGE"

          # Create test changelog entry
          echo -e "## [$VERSION] - $RELEASE_DATE\n" > TEST_RELEASE_NOTES.md

          # Add features
          git log $RANGE --format="* %s (%h)" | grep -E "^* feat|^* feature" 2>/dev/null | sed -E 's/^* feat(ure)?//' > features.txt
          if [ -s features.txt ]; then
            echo -e "### Added\n" >> TEST_RELEASE_NOTES.md
            cat features.txt >> TEST_RELEASE_NOTES.md
            echo -e "\n" >> TEST_RELEASE_NOTES.md
          fi

          # Add fixes
          git log $RANGE --format="* %s (%h)" | grep "^* fix" 2>/dev/null | sed 's/^* fix//' > fixes.txt
          if [ -s fixes.txt ]; then
            echo -e "### Fixed\n" >> TEST_RELEASE_NOTES.md
            cat fixes.txt >> TEST_RELEASE_NOTES.md
            echo -e "\n" >> TEST_RELEASE_NOTES.md
          fi

          # Add other changes
          git log $RANGE --format="* %s (%h)" | grep -v -E "^* feat|^* feature|^* fix" 2>/dev/null > others.txt
          if [ -s others.txt ]; then
            echo -e "### Changed\n" >> TEST_RELEASE_NOTES.md
            cat others.txt >> TEST_RELEASE_NOTES.md
            echo -e "\n" >> TEST_RELEASE_NOTES.md
          fi

          # If no changes found, add a simple entry
          if [ ! -s features.txt ] && [ ! -s fixes.txt ] && [ ! -s others.txt ]; then
            echo "- Test release version $VERSION" >> TEST_RELEASE_NOTES.md
          fi

          # Clean up temporary files
          rm -f features.txt fixes.txt others.txt

          echo "TEST_RELEASE_NOTES.md generated:"
          cat TEST_RELEASE_NOTES.md

      - name: Build package
        run: |
          cd modelcontextprotocol
          python -m pip install --upgrade pip
          pip install build wheel
          python -m build
          echo "üì¶ Package built successfully"
          ls -la dist/

      - name: Test Docker build
        run: |
          cd modelcontextprotocol
          docker build -t test-atlan-mcp-server:${{ steps.get_version.outputs.version }} .
          echo "üê≥ Docker image built successfully"
          docker images | grep test-atlan-mcp-server

      - name: Create test tag
        run: |
          echo "Would create tag v${{ steps.get_version.outputs.version }}"
          echo "Test release process completed successfully!"
