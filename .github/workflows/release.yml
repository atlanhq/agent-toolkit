name: Release

on:
  push:
    branches:
      - main

jobs:
  version-and-tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.tag_version.outputs.new_version }}
      current_version: ${{ steps.tag_version.outputs.current_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Get current version
        id: current_version
        run: |
          VERSION=$(grep -m 1 "__version__" modelcontextprotocol/version.py | cut -d'"' -f2)
          echo "current_version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Determine new version
        id: tag_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
          # Check commits since last tag for conventional commit messages
          COMMITS=$(git log -n 10 --format="%s")
          
          # Parse version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          
          # Check for breaking changes
          if echo "$COMMITS" | grep -q "BREAKING CHANGE:" || echo "$COMMITS" | grep -q "!:"; then
            NEW_MAJOR=$((MAJOR + 1))
            NEW_VERSION="$NEW_MAJOR.0.0"
          # Check for features
          elif echo "$COMMITS" | grep -q "^feat"; then
            NEW_MINOR=$((MINOR + 1))
            NEW_VERSION="$MAJOR.$NEW_MINOR.0"
          # Check for fixes
          elif echo "$COMMITS" | grep -q "^fix"; then
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          else
            # Default to patch bump
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update version.py
        if: steps.tag_version.outputs.new_version != steps.tag_version.outputs.current_version
        run: |
          NEW_VERSION="${{ steps.tag_version.outputs.new_version }}"
          sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" modelcontextprotocol/version.py
      
      - name: Generate changelog entry
        id: changelog
        if: steps.tag_version.outputs.new_version != steps.tag_version.outputs.current_version
        run: |
          NEW_VERSION="${{ steps.tag_version.outputs.new_version }}"
          RELEASE_DATE=$(date +"%Y-%m-%d")
          
          # Create temporary changelog entry
          echo -e "## [$NEW_VERSION] - $RELEASE_DATE\n" > temp_changelog.md
          
          # Add features
          git log -n 20 --format="* %s (%h)" | grep "^* feat" | sed 's/^* feat//' > features.txt
          if [ -s features.txt ]; then
            echo -e "### Added\n" >> temp_changelog.md
            cat features.txt >> temp_changelog.md
            echo -e "\n" >> temp_changelog.md
          fi
          
          # Add fixes
          git log -n 20 --format="* %s (%h)" | grep "^* fix" | sed 's/^* fix//' > fixes.txt
          if [ -s fixes.txt ]; then
            echo -e "### Fixed\n" >> temp_changelog.md
            cat fixes.txt >> temp_changelog.md
            echo -e "\n" >> temp_changelog.md
          fi
          
          # Add other changes
          git log -n 20 --format="* %s (%h)" | grep -v "^* feat" | grep -v "^* fix" > others.txt
          if [ -s others.txt ]; then
            echo -e "### Changed\n" >> temp_changelog.md
            cat others.txt >> temp_changelog.md
            echo -e "\n" >> temp_changelog.md
          fi
          
          # Update CHANGELOG.md - insert new changes after the Unreleased section
          sed -i '/## \[Unreleased\]/,/^$/{/^$/i\
          '"$(cat temp_changelog.md)"'
          }' CHANGELOG.md
          
          # Also save for release notes
          cp temp_changelog.md RELEASE_NOTES.md
      
      - name: Commit version bump and changelog update
        if: steps.tag_version.outputs.new_version != steps.tag_version.outputs.current_version
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git add modelcontextprotocol/version.py CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.tag_version.outputs.new_version }} and update changelog [skip ci]"
          git push
      
      - name: Create Tag
        if: steps.tag_version.outputs.new_version != steps.tag_version.outputs.current_version
        run: |
          git tag v${{ steps.tag_version.outputs.new_version }}
          git push --tags
      
      - name: Create GitHub Release
        if: steps.tag_version.outputs.new_version != steps.tag_version.outputs.current_version
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.tag_version.outputs.new_version }}
          body_path: RELEASE_NOTES.md
          token: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    needs: version-and-tag
    if: needs.version-and-tag.outputs.new_version != needs.version-and-tag.outputs.current_version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine
          
      - name: Build package
        run: |
          cd modelcontextprotocol
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          cd modelcontextprotocol
          twine upload dist/*

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/atlan-mcp:latest
            ghcr.io/${{ github.repository_owner }}/atlan-mcp:${{ needs.version-and-tag.outputs.new_version }} 