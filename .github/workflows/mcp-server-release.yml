name: MCP-Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  prepare-release:
    # Only run when a PR with the "release" label is merged
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_release: ${{ steps.check_tag.outputs.exists == 'false' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -m 1 "__version__" modelcontextprotocol/version.py | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_NAME="v${{ steps.get_version.outputs.version }}"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, stopping workflow"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG_NAME does not exist, continuing workflow"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog entry
        id: changelog
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          set +e  # Don't exit on error

          VERSION="${{ steps.get_version.outputs.version }}"
          RELEASE_DATE=$(date +"%Y-%m-%d")

          echo "Generating changelog for version $VERSION ($RELEASE_DATE)"

          # Get the previous version tag. If this is the first release, PREV_TAG will be empty.
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)

          if [ -z "$PREV_TAG" ]; then
            # If no previous tag, use root commit
            PREV_COMMIT=$(git rev-list --max-parents=0 HEAD)
            RANGE="$PREV_COMMIT..${{ github.event.pull_request.head.sha }}"
            echo "No previous tag found. Using range from first commit to PR head SHA: $RANGE"
          elif git rev-parse "$PREV_TAG" >/dev/null 2>&1; then
            RANGE="$PREV_TAG..${{ github.event.pull_request.head.sha }}"
            echo "Previous tag found: $PREV_TAG. Using range from previous tag to PR head SHA: $RANGE"
          else
             # Fallback if PREV_TAG is not a valid ref (e.g. very first release after this script is introduced)
            PREV_COMMIT=$(git rev-list --max-parents=0 HEAD) # Or consider GITHUB_SHA of the commit before the merge
            RANGE="$PREV_COMMIT..${{ github.event.pull_request.head.sha }}"
            echo "PREV_TAG $PREV_TAG was not a valid ref. Using range from first commit to PR head SHA: $RANGE"
          fi

          echo "Using commit range for RELEASE_NOTES.md: $RANGE"

          # Create temporary changelog entry for RELEASE_NOTES.md
          echo -e "## [$VERSION] - $RELEASE_DATE\n" > RELEASE_NOTES.md

          # Add features
          git log $RANGE --format="* %s (%h)" --grep="^feat" --perl-regexp --no-merges 2>/dev/null | sed -E 's/^\* feat(\(.+\))?:?\s*//' > features.txt
          if [ -s features.txt ]; then
            echo -e "### Added\n" >> RELEASE_NOTES.md
            cat features.txt >> RELEASE_NOTES.md
            echo -e "\n" >> RELEASE_NOTES.md
          fi

          # Add fixes
          git log $RANGE --format="* %s (%h)" --grep="^fix" --perl-regexp --no-merges 2>/dev/null | sed 's/^\* fix(\(.+\))?:?\s*//' > fixes.txt
          if [ -s fixes.txt ]; then
            echo -e "### Fixed\n" >> RELEASE_NOTES.md
            cat fixes.txt >> RELEASE_NOTES.md
            echo -e "\n" >> RELEASE_NOTES.md
          fi

          # Add other changes (excluding merge commits, chore, docs, style, refactor, test, ci)
          git log $RANGE --format="* %s (%h)" --no-merges | grep -v -E "^\* (feat|fix|chore|docs|style|refactor|test|ci)(\(.+\))?:?\s*" 2>/dev/null > others.txt
          if [ -s others.txt ]; then
            echo -e "### Changed\n" >> RELEASE_NOTES.md
            cat others.txt >> RELEASE_NOTES.md
            echo -e "\n" >> RELEASE_NOTES.md
          fi

          # If no specific changes found, add a simple entry
          if [ ! -s features.txt ] && [ ! -s fixes.txt ] && [ ! -s others.txt ]; then
            echo "- Release version $VERSION" >> RELEASE_NOTES.md
          fi

          # Clean up temporary files
          rm -f features.txt fixes.txt others.txt

          echo "RELEASE_NOTES.md generation completed."

          # Show result for debugging
          echo "RELEASE_NOTES.md contents:"
          cat RELEASE_NOTES.md

      - name: Create Tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          git tag v${{ steps.get_version.outputs.version }}
          git push --tags

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          body_path: RELEASE_NOTES.md
          token: ${{ secrets.GITHUB_TOKEN }}

      # Upload release notes for other jobs to use
      - name: Upload release notes
        if: steps.check_tag.outputs.exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: RELEASE_NOTES.md
          retention-days: 1

  publish-pypi:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.prepare-release.outputs.version }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine

      - name: Build package
        run: |
          cd modelcontextprotocol
          python -m build

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          cd modelcontextprotocol
          twine upload dist/*

  publish-docker:
    needs: prepare-release
    if: needs.prepare-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.prepare-release.outputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./modelcontextprotocol/
          push: true
          tags: |
            ghcr.io/atlanhq/atlan-mcp-server:latest
            ghcr.io/atlanhq/atlan-mcp-server:${{ needs.prepare-release.outputs.version }}
